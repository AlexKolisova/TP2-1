import unittest
import random
import time
from main import _sum, _mult, _min, _max, read

array = read("test.txt")
arraymax = read("testmax.txt")
arraymin = read("testmin.txt")
arraymult = read("testmult.txt")
arraytim = read("testtim.txt")

class utest(unittest.TestCase):
    
    def test_min(self):
        self.assertTrue(_min(array) == -9)
        self.assertTrue(_min(arraymin) == -9991)
        self.assertTrue(_min(arraymax) == -99911)
        self.assertTrue(_min(arraymult) == -3000)
        self.assertTrue(_min(arraytim) == -3000)

    def test_max(self):
        self.assertTrue(_max(array) == 9)
        self.assertTrue(_max(arraymin) == 9981)
        self.assertTrue(_max(arraymax) == 99352)
        self.assertTrue(_max(arraymult) == 3000)
        self.assertTrue(_max(arraytim) == 3000)
    
    def test_sum(self):
        self.assertTrue(_sum(array) == 20)
        self.assertTrue(_sum(arraymin) == -45404)
        self.assertTrue(_sum(arraymax) == -507944)
        self.assertTrue(_sum(arraymult) == 16267)
        self.assertTrue(_sum(arraytim) == -297327)

    def test_mult(self):
        self.assertTrue(_mult(array) == 14932726824960)
        self.assertTrue(_mult(arraymin) == 1617895251540625184425889612121547990602429780282793036971913498716315786294607228847820668086910384156277134847639163982694384916107463602484441668792984104063886458321790436286242610060465146226300434803492056919490968589927562790122971627356252303458031767151688866180354771197054386251090173494101726187400019104844205113411866089188465719196111440400349702003318154213332249418234637845021580699116826521833152900238564508333795008769230494335769324114869389607995527540036894945548029532855694057984945018147718640159134214888491146699063368524911167325238699319368610779712507426857336265759429956803635815960413390061236369489418731386913961163863730696317027927992469591358078619601218059090934039001227136838517176743163738579800168008871929124820189828698153373337277650163047008215249110837903057311505165629784044525627265967618292404610006498734665036265878410298997718630674320384987127938088267754976907694741113972249280598489652075883269572593824488987160293325474122088632220665870442654778150474579645233660656478491121276721942341603890074392723785144531034699448563735506182544910004729789359892884472451919619766883714615378207531638990765749577993834781187969195438637702851602662475361711962762691014931551306615397340215224459713256854647243635360833807933702836134235737877505730669372854659380664807857297389256406126938008524112427929854792043684483763773130097224050554870510448040771436759051363310462665075922222708045656571120711489928937002202355712701112373689838205501059331948573107685914513231467314447096518535619857695565277876771971821359876821972560240482300909486924215152337551874599578931552233003958425174935914036192217717141514770552581844813492132541530246621705218229914313265733765041880524138343396597283265755323191141596231252410861124636715149693573886551590196287532717100335714061922867328019823782818872823526920274593308134535027199982937766094671364731783573233473754587284520603944197195744326850820238090816954772811665776150163965014952990198520894684575257115017344807309914178230980089268864710332027039707726146921701755477165023342748139881648914428872329759944940595446680011985902176798179338113157241821770980666148138531899041822787973665282815031386500070931095078231126726050876956618309873541864792692747707534955738588273504191550059783429715494981804389813802804424028830528295115029836233641031480687573596213457284380147962086021956710470018570734471676666423881435790192031859483017089015163212068125126763802736246883130803526868929535188158649577405558433833158609363232678686028319822107012171601728036758534765117029240383573160194316064060797198359097020415558306263190939998062066563780029323557819625327743179845244045747735236411431239453968691859561329580921512825794030443182307329656047964991289658571611849785414893085221057792734783798818338503855204171966067407094794189475248083817046768814787509804556348322769244846320244949716868736210453951761118802537125584726809754353869597236717448674370027859212842725737502339519763246794968930051446248911976924577600321030116063840699448426940585732049448303192570684828124345492397883750054318586083878747990033127765841601176378379835087343204022191534297325313548610162651135505335771456655201381229598170317218044830027693670821721606532792348396983094292157555788051929561563136000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.assertTrue(_mult(arraymax) == -3344897411635876703887847581023317099592768011821096124518251399142605069792495562442022671823641916280157301479654947534157750571998942851837314959931124859042875438299187604234336272934182631252675952770620384181708013541748223497732378760555963928259752182408722786413790673211081954857293261245405252589617084771100927883768653761844071370553319836878167923492373670690455204645809218875990856041805275385864467183033758577351423178454452654297563073372608862055537344412487378992879737746559758089908984395465783760155291109748199284394466983451266174800022212896815146599748476828510086523034359018706657040167456875337337070429716584376844262010665826142033843997559396760412253432246832029989423665928005896080341024518396455566133599146313068455645303161534948864922364353835398965264275225263188783000732847685557187170655605264800816350000493681685311756421721272525316553740444967177254350789242776557506161556238890140693503001269249033376314931228725716881838433718527554638137227522240263736406883272552403482189829143281269751101326205504920353491116761222792564818355614670754335050923155032787335235454395338734243550002008815615110910851519472038657812377162273197766339016826091687173028172552680079129203626483981521896995626328930658025094691530228151224132868604038257520541504169189782088405151832577759010977655165527109140788256003158543195371426367592807267127294050704858961548391355864008955426707018021466665281901349687135355566117120321518895953511974577907957669303601278175157754981917989938288246553984414342448155539174755179680277793393672844930755187934514261468860603234557800352917777132351894109992701226481293950877162115084876256117438713320150168636255391106806035529500447200547277133995835950874470679052445276986846553415809676004286661883527896833490786271684727483508689937433871409563721428496414266541109394791314464947185696132393628322445921627342703361982228149532219308956615478720138829034954766907580786252847309809446760649774981612435755836562627407520087858612997012991923180538684317719955989195331075999271489471495174276992189571991659352815726227365331769530900397667838431105908736000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.assertTrue(_mult(arraymult) == 0)
        self.assertTrue(_mult(arraytim) == 0)
        
    def test_sum_int(self):
        self.assertIsInstance(_sum(array), int)
        
if __name__ == "__main__":
    unittest.main()
